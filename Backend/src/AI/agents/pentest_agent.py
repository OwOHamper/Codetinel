from typing import Optional, Dict, Any
from langchain.tools import BaseTool
from pydantic import BaseModel, Field
import aiohttp
from ..tools.web_tools import WebRequestTool
from ..tools.research_tools import VulnerabilityResearchTool
from .base_agent import BaseAgentManager

class PentestAgent(BaseAgentManager):
    """Specialized agent for testing specific vulnerabilities in web applications"""
    
    def __init__(
        self,
        openai_api_key: str,
        # tavily_api_key: str,
        target_url: str,
        model_name: str = "gpt-4o",
        temperature: float = 0
    ):
        system_message = """You are a security expert specialized in testing specific vulnerabilities in web applications.
        Your goal is to:
        1. Research and understand the vulnerability details
        2. Analyze the target endpoint and context
        3. Design and execute appropriate security tests
        4. Document findings and exploitation potential
        
        Always follow responsible disclosure practices and never perform destructive tests.
        """
        
        # Initialize tools
        tools = [
            WebRequestTool(base_url=target_url),
            # VulnerabilityResearchTool(tavily_api_key=tavily_api_key)
        ]
        
        super().__init__(
            openai_api_key=openai_api_key,
            model_name=model_name,
            temperature=temperature,
            system_message=system_message,
            tools=tools
        )
        
        self.target_url = target_url

    async def test_vulnerability(
        self,
        vulnerability_type: str,
        endpoint: str,
        tech_stack: Optional[str] = None,
        additional_context: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """Test a specific vulnerability on an endpoint"""
        message = f"""
        Test the following vulnerability:
        - Type: {vulnerability_type}
        - Endpoint: {endpoint}
        - Tech Stack: {tech_stack or 'Not specified'}
        - Additional Context: {additional_context or {}}
        
        Follow these steps:
        1. Research the vulnerability and common exploitation methods
        2. Analyze the endpoint for potential vulnerability
        3. Design and execute appropriate security tests
        4. Document findings and exploitation potential
        """
        
        context = {
            "vulnerability_type": vulnerability_type,
            "endpoint": endpoint,
            "tech_stack": tech_stack,
            **(additional_context or {})
        }
        
        return await self.process_message(
            message=message,
            context=context
        )